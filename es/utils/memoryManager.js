/*!
 * ***********************************
 * @ldesign/color v1.0.0           *
 * Built with rollup               *
 * Build time: 2024-10-21 14:32:31 *
 * Build mode: production          *
 * Minified: No                    *
 * ***********************************
 */import{Color as l}from"../core/Color.js";import{globalColorCache as n}from"./advancedCache.js";import{globalColorCache as s}from"./cache.js";class a{constructor(){this.cleanupInterval=null,this.CLEANUP_INTERVAL=6e4,this.MAX_MEMORY_MB=50,this.memoryCheckTimer=null,this.startAutoCleanup(),typeof document<"u"&&document.addEventListener("visibilitychange",this.handleVisibilityChange.bind(this)),typeof window<"u"&&window.addEventListener("beforeunload",this.cleanup.bind(this),{once:!0})}static getInstance(){return a.instance||(a.instance=new a),a.instance}handleVisibilityChange(){document.hidden&&this.reduceMemoryUsage()}startAutoCleanup(){this.cleanupInterval===null&&typeof window<"u"&&(this.cleanupInterval=window.setInterval(()=>{this.performAutoCleanup()},this.CLEANUP_INTERVAL))}stopAutoCleanup(){this.cleanupInterval!==null&&(clearInterval(this.cleanupInterval),this.cleanupInterval=null)}performAutoCleanup(){const e=this.getMemoryStats();e.estimatedMemoryMB>this.MAX_MEMORY_MB?this.aggressiveCleanup():e.estimatedMemoryMB>this.MAX_MEMORY_MB*.8&&this.moderateCleanup()}getMemoryStats(){const e=l.pool?.length||0,t=s.size,o=n.size,r=t+o,i=e*100+r*200;return{colorPoolSize:e,colorCacheSize:t,advancedCacheSize:o,totalCacheItems:r,estimatedMemoryMB:i/(1024*1024)}}reduceMemoryUsage(){const e=l.pool;if(e&&e.length>10&&(e.length=Math.floor(e.length/2)),n.optimize&&n.optimize(),s.size>50){const t=Math.floor(s.size/2),o=s.cache;if(o&&o.keys){const r=Array.from(o.keys());for(let i=0;i<t;i++)s.delete(r[i])}}}moderateCleanup(){const e=l.pool;if(e&&e.length>5){const t=Math.floor(e.length*.25);e.splice(0,t)}n.optimize&&n.optimize()}aggressiveCleanup(){const e=l.pool;if(e&&(e.length=Math.min(5,e.length)),s.size>20){const t=s.cache;if(t&&t.keys){const o=Array.from(t.keys()),r=20;for(let i=r;i<o.length;i++)s.delete(o[i])}}if(n.size>20){const t=n.getMostFrequent(20);n.clear(),t.forEach(o=>{n.set(o.key,o.value)})}}cleanup(){this.stopAutoCleanup(),l.cleanup&&l.cleanup(),s.clear(),n.destroy(),this.memoryCheckTimer!==null&&(clearTimeout(this.memoryCheckTimer),this.memoryCheckTimer=null)}reset(){const e=l.pool;e&&(e.length=0),s.clear(),n.clear();const t=n.stats;t&&(t.hits=0,t.misses=0)}setMemoryLimit(e){this.MAX_MEMORY_MB=Math.max(10,e)}setAutoCleanup(e){e?this.startAutoCleanup():this.stopAutoCleanup()}requestGarbageCollection(){if(typeof window<"u"&&window.gc)try{window.gc()}catch{}}}const c=a.getInstance();function h(){c.cleanup()}function m(){c.reset()}function p(){return c.getMemoryStats()}function C(u){c.setMemoryLimit(u)}function M(u){c.setAutoCleanup(u)}/*! End of @ldesign/color | Powered by @ldesign/builder */export{a as MemoryManager,h as cleanupMemory,p as getMemoryStats,c as memoryManager,m as resetMemory,M as setAutoCleanup,C as setMemoryLimit};
//# sourceMappingURL=memoryManager.js.map
